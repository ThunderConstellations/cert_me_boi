# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env*
.venv*
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is recommended to include the following files:
#  .idea/
#  *.iml
#  *.ipr
#  *.iws

# Project specific
data/certificates/*
data/screenshots/*
logs/*
!data/certificates/.gitkeep
!data/screenshots/.gitkeep
!logs/.gitkeep

# Configuration files with sensitive data
config/secrets.yaml
config/api_keys.yaml
config/personal.yaml
config/user_config.yaml
config/*_personal.yaml
config/*_user.yaml

# Personal and sensitive information
.env
.env.*
secrets.json
api_keys.json
credentials.json
personal_config.json
user_data.json
*.secret
*.private
*.personal

# AI and development traces (hide AI assistance)
.cursor/
.specstory/
.autopilot.json
.ai_history/
.chat_logs/
.conversation_logs/
ai_logs/
openrouter_logs/
model_logs/
assistant_logs/
copilot_logs/
claude_logs/
gpt_logs/
deepseek_logs/
*.ai_log
*.chat_log
*.conversation
*.ai_cache

# IDE and editor files (comprehensive)
.vscode/
.idea/
.fleet/
.vs/
.history/
.devcontainer/
*.code-workspace
*.sublime-project
*.sublime-workspace
*.swp
*.swo
*~
.editorconfig
.prettierrc*
.eslintrc*

# Browser automation and testing
browser_data/
playwright-report/
test-results/
user_data_dir/
chrome_user_data/
firefox_profile/
browser_profiles/
session_data/
cookies.txt
local_storage.json

# AI model cache and artifacts
models/
.cache/
.model_cache/
.ai_cache/
huggingface_cache/
transformers_cache/
torch_cache/
model_artifacts/
*.model
*.bin
*.safetensors
*.onnx
model_downloads/

# Personal development files
notes.md
todo.md
personal_notes.md
development_notes.md
scratch.py
test_personal.py
debug_*.py
temp_*.py
*.draft
*.wip

# Temporary and debug files
*.tmp
*.temp
temp/
tmp/
debug/
scratch/
working/
draft/
*.debug
*.log
debug_*.txt
temp_*.txt

# Personal automation data
automation_history/
user_sessions/
personal_data/
user_profiles/
session_backups/
automation_logs/
course_data/
progress_data/
*.session
*.progress

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
desktop.ini
$RECYCLE.BIN/

# Windows specific
*.lnk
*.exe.manifest
*.application.manifest

# Local configuration overrides
local_config.py
local_settings.py
dev_config.py
personal_config.py
user_config.py
local.yaml
dev.yaml

# Documentation that might reveal development process
DEVELOPMENT.md
AI_NOTES.md
PERSONAL_README.md
IMPLEMENTATION_NOTES.md
*.draft.md

# Version control artifacts
.gitconfig_local
.git_credentials
.github_token

# Social media assets (will be hosted separately)
cert-me-boi-social.png
social_images/
marketing_assets/

.extension/
