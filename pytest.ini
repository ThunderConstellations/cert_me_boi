[pytest]
minversion = 8.3.5
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning

# Test collection
norecursedirs = .git .tox .env .venv env venv

# Output configuration
console_output_style = progress
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test execution
addopts = 
    -ra -q
    --verbose
    --capture=no
    --strict-markers
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --cov-branch
    --no-cov-on-fail

# Markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    api: marks tests as api tests
    monitor: marks tests as monitor tests
    automation: marks tests as automation tests
    browser: marks tests that require a browser
    ai: marks tests that require AI models

# Coverage settings
[coverage:run]
branch = True
source = src
omit = 
    */tests/*
    */site-packages/*
    */dist-packages/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise AssertionError
    raise NotImplementedError
    if False:
    if typing.TYPE_CHECKING:
    @abc.abstractmethod
    @typing.overload

# Show missing lines in coverage reports
show_missing = True

# Fail if coverage is below 80%
fail_under = 80

[coverage:html]
directory = test_results/html

# Test timeouts
timeout = 300

# Random order settings
random_order = true

# xdist settings
xdist_group_by = module 